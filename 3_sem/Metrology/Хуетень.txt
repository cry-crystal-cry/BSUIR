1. Понятие жизненного цикла программных средств, его этапы.

	Жизненный цикл программного обеспечения определяется как период времени, который начинается с момента принятия решения о необходимости создания ПО и заканчивается в момент его полного изъятия из эксплуатации.
	Обычно выделяют следующие шесть этапов ЖЦ программного продукта:

	- формирование требований к системе (планирование);
	- проектирование;
	- реализация (кодирование);
	- тестирование;
	- ввод в действие;
	- эксплуатация и сопровождение.

	С понятием ЖЦ программного средства или системы тесно связано понятие модели жизненного цикла.

2. Основные модели жизненного цикла программных средств.
	
	Модель жизненного цикла программного обеспечения (Software Life Cycle Model) – это совокупность процессов, работ и задач ЖЦ, отражающая их взаимосвязь и последовательность выполнения.

	В зависимости от последовательности выполнения этапов и взаимосвязей между ними выделяют такие модели ЖЦ:

	- каскадная (водопадная);
	- инкрементная (поэтапная с промежуточным контролем);
	- итерационная (спиральная).

	Водопадная модель (Waterfall Model) предполагает строго последовательное выполнение каждого из этапов без возможности возврата к предыдущим шагам до полного завершения цикла разработки. Каждый этап начинается только после полного завершения предыдущего и имеет строгие критерии входа и выхода – входные и выходные данные.

	Положительные стороны каскадного подхода:
	- на каждом этапе формируется законченный набор проектной документации, отвечающий критериям полноты и согласованности;
	- выполняемые в логической последовательности этапы позволяют планировать сроки завершения всех работ и соответствующие затраты.

	Инкрементная модель (Incremental Model) предполагает, что этапы ЖЦ выполняются в строгой последовательности, но с каждого этапа можно при необходимости вернуться на любой предыдущий для доработки. Стратегия конструирования предполагает несколько циклов и возможны промежуточные версии для распространения.

	Альтернативным решением стала итерационная модель, которая предполагает выполнение проекта итерациями. На сегодня она имеет несколько вариантов практического применения, среди которых наиболее известны спиральная модель ( Spiral Model), модель RAD, гибкая методология (Agile).

	В рамках каждой итерации продукт проходит все этапы разработки (сектора спирали), при этом все требования изначально не определены, а дополняются по мере разработки проекта – от версии к версии дополняются и изменяются. Соответственно, стратегия конструирования предполагает несколько циклов и обязательно имеются промежуточные версии для распространения.

	Положительные стороны спиральной модели:

	- каждый виток спирали соответствует созданию работоспособного фрагмента или версии программного средства или системы;
	- есть возможность уточнить и дополнить требования, цели и характеристики проекта;
	- есть возможность оценить качество разработки и спланировать работы для следующего витка спирали;
	- углубляются и последовательно конкретизируются детали проекта и в результате выбирается обоснованный вариант;

3. Общие сведения о стандартах в области программного обеспечения.

	В настоящее время во всем мире ведутся активные работы в направлении стандартизации жизненного цикла (ЖЦ) программного обеспечения (ПО). Стандартизация ЖЦ позволяет упорядочить вопросы создания, сопровождения и управления ПО. Строгое соблюдение требований стандартов обеспечивает унификацию процессов ЖЦ программных средств и их компонентов. Это ведет к повышению качества отдельных процессов ЖЦ и в итоге к повышению качества всего программного продукта.

	Стандарты регламентируют ЖЦ ПО, а в некоторых случаях и процессы его разработки. Среди стандартов можно выделить несколько уровней – международные, государственные, корпоративные.

	В настоящее время базовым стандартом в области жизненного цикла программных средств и систем является международный стандарт ISO/IEC/IEEE 12207:2017 (Systems and software engineering – Software life cycle processes).

	В Республике Беларусь действует национальный стандарт СТБ ИСО/МЭК 12207–2003 ( Информационная технология – Процессы жизненного цикла программных средств и систем). Данный стандарт является аутентичным аналогом редакции международного стандарта ISO/IEC 12207:1995 (утвержден и введен в действие постановлением Госстандарта Республики Беларусь от 19 марта 2003 г. № 15).

	В России в 2012 г. введен в действие ГОСТ Р ИСО/МЭК 12207–2010, содержащий аутентичный текст международного стандарта ISO/IEC 12207:2008.

	Стандарт определяет ЖЦ информационной системы в целом, однако её процессы описываются исключительно в рамках и в контексте ее программных средств и не затрагивают другие аспекты. Какой-то конкретной модели ЖЦ ПО в указанных стандартах не предлагается к использованию.

	К основным корпоративным стандартам для разработки ПО относятся: Custom Development Method (CDM), Rational Unified Process ( RUP), Microsoft Solution Framework (MSF) и др.

	По своей сути «корпоративные стандарты» (или методологии разработки) – это набор концепций и рекомендуемых моделей, которые позволяют разрабатывать и внедрять информационные системы на основе технологий и инструментальных средств определенной компании (Microsoft, Oracle, IBM и др.).

	4. Стандарты в области организацииЫ жизненного цикла програмнного обеспечения
	
	В настоящее время базовым стандартом в области жизненного цикла программных средств и систем является международный стандарт ISO/IEC/IEEE 12207:2017 (Systems and software engineering – Software life cycle processes).
	В Республике Беларусь действует национальный стандарт СТБ ИСО/МЭК 12207–2003 ( Информационная технология – Процессы жизненного цикла программных средств и систем). Данный стандарт является аутентичным аналогом редакции международного стандарта ISO/IEC 12207:1995 (утвержден и введен в действие постановлением Госстандарта Республики Беларусь от 19 марта 2003 г. № 15).

	В России в 2012 г. введен в действие ГОСТ Р ИСО/МЭК 12207–2010, содержащий аутентичный текст международного стандарта ISO/IEC 12207:2008.
	
	К основным корпоративным стандартам для разработки ПО относятся: Custom Development Method (CDM), Rational Unified Process ( RUP), Microsoft Solution Framework (MSF) и др.

	Например, MSF является одной из интерпретаций спиральной (циклической) модели разработки приложений и базируется на практических результатах организации распределенных вычислений и применения технологий «клиент-сервер» компании Microsoft, ее партнеров и заказчиков. Унифицированный процесс Rational от IBM – это универсальная методология распределения задач и сфер ответственности при разработке программного обеспечения, построенная на итерационном подходе. Методика Oracle CDM – это технология ориентированная на разработку ПО, в котором приоритетным является разработка и использование базы данных, в том числе конверсия базы данных при переходе на новое ПО. В основном предполагает использование инструментального комплекса от компании Oracle.

5. Основные понятия в области ЖЦ. Компоненты ЖЦ. Иерархическая структура ЖЦ.

	Аттестация - это подтверждение экспертизой и представлением объективных доказательств того, что конкретные требования к конкретным объектам полностью реализованы. В процессе проектирования и разработки аттестация связана с экспертизой продукта в целях определения его соответствия потребностям (требованиям) пользователя.
	Аудит - это проверка, выполняемая компетентным органом (лицом) с целью обеспечения независимой оценки степени соответствия программных продуктов или процессов установленным требованиям.
	Базовая линия -это официально принятая версия элемента конфигурации, независимая от среды, формально обозначенная и зафиксированная в конкретный момент времени жизненного цикла элемента конфигурации.
	Верификация - это подтверждение экспертизой и представлением объективных доказательств того, что конкретные требования полностью реализованы. В процессе проектирования и разработки верификация связана с экспертизой результатов данной работы для определения их соответствия установленным к данной работе (общим) требованиям.
	Квалификационное испытание - это испытание (тестирование), проводимое разработчиком, при необходимости санкционированное заказчиком, для демонстрации того, что программный продукт удовлетворяет установленным требованиям и готов к использованию в заданных условиях эксплуатации.
	Квалификационные требования - набор критериев или условий, которые должны быть удовлетворены для того, чтобы квалифицировать программный продукт на соответствие установленным требованиям и готовность к использованию в заданных условиях эксплуатации.
	Контекст использования - это пользователи, задания, среда (аппаратное обеспечение, программное обеспечение и материалы), а также физические и социальные среды, в которых используется данное программное средство.
	Обеспечение качества - это все запланированные и систематически выполняемые в рамках системы качества работы; при необходимости объективные доказательства, обеспечивающие уверенность в том, что объект будет полностью соответствовать установленным требованиям качества. Существуют как внешние, так и внутренние цели обеспечения качества. Внутреннее обеспечение качества создает уверенность у руководства в достижении заданных требований качества внутри организации. Внешнее обеспечение качества создает уверенность у потребителя или других лиц в достижении заданных требований качества в договорных или других ситуациях.
	Программная услуга - это выполнение работ, заданий или обязанностей, связанных с программным продуктом, таких, как разработка, сопровождение или эксплуатация.
	Программное обеспечение - это полный набор (программное обеспечение) или часть (программное средство) программ, процедур, правил и связанной с ними документации системы обработки информации.
	Программный продукт - это набор компьютерных программ, процедур, связанных с ними документации и данных. Продукты включают промежуточные продукты и продукты, предназначенные для пользователей типа разработчиков и персонала сопровождения.
	Информационная система - это комплекс, состоящий из процессов, технических и программных средств, устройств и персонала, обладающий возможностью удовлетворять установленным потребностям или целям.
	Спецификация требований к программному продукту - это определение и перечень требований к программному продукту.
	Тестируемость - это степень, до которой могут быть запланированы объективность и реализуемость тестирования, проверяющего соответствие требованию.
	Тестовое покрытие- это степень, до которой с помощью контрольных примеров проверяют требования к системе или программному продукту.
	Техническое задание - это документ, используемый заказчиком в качестве средства для описания и определения задач, выполняемых при реализации договора.
	Элемент конфигурации - это объект внутри конфигурации, который удовлетворяет функции конечного использования и может быть однозначно определен в данной эталонной точке.

6. СТБ ИСО/МЭК 12207-2003. Процессы жизненного цикла программных средств
и их классификация.

	Государственный стандарт СТБ ИСО/МЭК 12207 определяет жизненный цикл программных средств и систем в виде трехуровневой иерархической структуры. Основу ЖЦ составляет набор процессов. Каждый процесс разделен на набор работ. Каждая работа в свою очередь разделена на набор задач.

	Стандарт регламентирует общее число процессов ЖЦ ПС, равное 17, которые разбиваются на три группы:

	- основные процессы, которые реализуются под управлением основных сторон, участвующих в ЖЦ ПС.
	- вспомогательные процессы, являющиеся целенаправленными составными частями других процессов. Их основное назначение – обеспечить успешную реализацию и качество выполнения программного проекта.
	- организационные процессы, предназначенные для создания в некоторой организации и совершенствования организационных структур, охватывающих процессы ЖЦ и соответствующий персонал.

7. СТБ ИСО/МЭК 12207-2003. Основные процессы ЖЦ.

	Основные процессы ЖЦ подразделяются на:
	- процесс заказа
	- процесс поставки
	- процесс разработки
	- процесс эксплуатации
	- процесс сопровождения

8. СТБ ИСО/МЭК 12207-2003. Процесс разработки и его структура.

	Процесс разработки делится на следующие пункты:
	5.3.1 Подготовка процесса разработки
	5.3.2 Анализ требований системе
	5.3.3 Проектирование аппаратной архитектуры
	5.3.4 Анализ требований программных средств
	5.3.5 Проектирование программных средств
	5.3.6 Техническое проектирование программных средств
	5.3.7 Программирование и тестирование программных средств
	5.3.8 Сборка программных средств
	5.3.9 Квалификационные испытания программных средств
	5.3.10 Сборка системы
	5.3.11 Квалификационные испытания системы
	5.3.12 Ввод в действие программных средств
	5.3.13 Обеспечение приёмки программных средств

9. Вспомогательные процессы ЖЦ.

	вспомогательные процессы, являющиеся целенаправленными составными частями других процессов. Их основное назначение – обеспечить успешную реализацию и качество выполнения программного проекта.
	
	- процесс документирования
	- процесс управления конфигурацией
	- процесс обеспечения качества
	- процесс верификации
	- процесс аттестации
	- процесс совместного анализа
	- процесс аудита	
	- процесс решения проблем

10. Организационные процессы ЖЦ.
	
	организационные процессы, предназначенные для создания в некоторой организации и совершенствования организационных структур, охватывающих процессы ЖЦ и соответствующий персонал.
	
	- управление
	- создание инфраструктуры
	- усовершенствование
	- обучение

11. СТБ ИСО/МЭК 12207-2003. Процесс верификации и его структура.

	Процесс верификации состоит из работы по подготовке процесса верификации и работе по верификации.

Подготовка процесса верификации 6.4.1: 
	- определение необходимости в проекте работ по верификации и степени их организационной независимости, анализ критичности проектных требований
	- установка процесса верификации (при необходимости)
	- выбор соответствующей независимой квалифицированной организации (при необходимости)
	- определение верифицируемых работ и продуктов, выбор работ и задач верификации
	- разработка плана верификации
	- реализация плана проведения верификации, обеспечение доступности его результатов заказчику, при необходимости организация связи с процессом решения проблем

Верификация 6.4.2: 
	- верификация договора по критериям
	- верификация процесса по критериям	
	- верификация требований по критериям
	- верификация результатов проектирования по критериям
	- верификация исходных текстов программных модулей по критериям
	- верификация сборки по критериям
	- верификация документации по критериям	

12. СТБ ИСО/МЭК 12207-2003. Процесс аттестации и его структура

	6.5.1 Подготовка процесса аттестации
	- определение необходимости в проекте работ по аттестации и степени их организованной независимости
	- установка процесса, задач, методов, методик и средств аттестации (при необходимости)
	- выбор соответствующей независимой квалифицированной организации (при необходимости)
	- разработка плана аттестации
	- реализация плана проведения аттестации, обеспечение доступности его результатов заказчику, при необходимости организация связи с процессом решения проблем

	6.5.2 Аттестация
	- подготовка выбранных требований к испытаниям (тестированию), контрольных примеров и технических условий испытаний к анализу результатов испытаний
	- обеспечение соответствия требований к испытаниям (тестированию), контрольных примеров и технических условий испытаний требованиям к объектам аттестации
	- проведение испытаний
	- подтверждение соответствия ПП заданным возможностям
	- проведение испытаний ПП в заданном контексте использования

13.СТБ ИСО/МЭК 12207-2003. Процесс совместного анализа и его структура. 
	
	6.6.1 Подготовка процесса совместного анализа
	- организация проведения периодических и целевых анализов хода работ в установленные сроки
	- согласование ресурсов, необходимых для проведения анализа, между участвующими в нём сторонами
	- согласование плана, объёма, процедур и критериве проведения анализа, состава анализируемых результатов работ
	- передача результатов анализа заинтересованным сторонам
	- согдасование результатов анализа, принимаемых обязательств и критериев завершения анализа
	
	6.6.2 Анализы управления проектом
	-оценка соответствия состояни проекта проектным планам, графикам, стандартам и руководстам

	6.6.3 Технические анализы
	- оценка соответствия состояния создаваемых программных продуктов или услуг проектным планам, графикам, стандартам и руководствам

14. СТБ ИСО/МЭК 12207-2003. Адаптация стандарта к условиям процесса.

	Процесс адаптации
	А.1. Определение условий выполнения проекта: 
	- определение характеристик условий выполнения проекта (ссылка), влияющих на адаптацию
	А.2. Запрос исходных данных
	- запрос и получения исходных данных, влияющих на адаптацию, от участвующих в проекте организаций
	А.3. Выбор процессов, работ и задач
	- определение необходимых процессов, работ и задач с учётом разрабатываемой документации и обязанностей исполнителей
	- установка в договоре дополнительных процессов, работ и задач, не описанных в стандарте СТБ ИСО/МЭК 12207-2003, оценка соответствия организационных процессов
	- отдельный анализ на предмет исключения из ЖЦ обязательных (по стандарту ИСО ....) задач, с учётом факторов риска, стоимости, графика работ, выполнимости, объёма, критичности и интерфейса с пользователем
	А.4. Документирование решений по адаптации и их обоснование
	- документальное оформление рещений по адаптации с их обоснованием


15. Инструментальные средства автоматизации жизненного цикла.

	ебал в рот, надо гуглить, либо я слепой и не увидел у него такого в лектосах

16. Качество программных средств. Основные понятия и определения. Показатели качества программных средств.

	Программное обеспечение сегодня находит широкое применение во всех сферах жизнедеятельности человека. Естественно, от правильности его работы зависят результаты труда и безопасность многих людей. В этой связи особое внимание уделяется вопросам оценки и управления качеством на протяжении всего ЖЦ ПС.

	Предполагается, что если ПС разрабатывается на основе спецификации с описанием требований и видения продукта, то качеством может выступать точное соответствие этим спецификациям (при условии их корректности).

	Спецификация это:
	– Определение и перечень специфических особенностей, уточнённая классификация чего-либо; 

	– Один из основных документов системы технической документации.

	Качество ПС - это совокупность черт и характеристик ПС, которые влияют на его способность удовлетворять заданные установленные и подразумеваемые потребности пользователей.

	Свойство ПС (software attribute)
Отличительная особенность ПС, которая может проявляться при его создании, использовании, анализе или изменении.

	Характеристика качества ПС - набор свойств ПС, посредством которых описывается и оценивается его качество.

	Подхарактеристика качества ПС - это характеристика качества ПС, входящая в состав другой характеристики качества.

	Уровень качества функционирования - это степень удовлетворения потребности, представленная конкретным набором значений характеристик качества.

	Подразумеваемые потребности - это потребности, которые не были установлены, но являются действительными потребностями при использовании продукта в конкретных условиях.

	Ранжирование - действие по отнесению измеренного значения к соответствующему уровню ранжирования.

	Уровень ранжирования - точка на порядковой шкале, которая используется для категоризации шкалы измерения. 

	- Уровень оценки позволяет ранжировать ПС в соответствии с установленными или подразумеваемыми потребностями. 

	- Соответствующие уровни ранжирования могут быть связаны с различными точками зрения на качество. Например, пользователей, администраторов или разработчиков.

	Атрибут - это измеримое физическое или абстрактное свойство ПС. 

	Атрибуты могут быть внешними или внутренними.

	Измерение - это использование метрики для присвоения атрибуту продукта значения (числа или категории) из шкалы.

	Индикатор - это мера, которая может использоваться для оценки или прогнозирования другой меры.

	Мера - число или категория, присваиваемая атрибуту продукта путем измерения.

	Мера косвенная - мера атрибута, которая получена из мер одного или большего числа других атрибутов.

	Мера прямая - мера атрибута, которая не зависит от меры любого другого атрибута.

	Метрика - это определенный метод и шкала измерения. 

	- Метрики могут быть внутренними, внешними или метриками качества в использовании; прямыми или косвенными. 

	- Метрики включают методы для категоризации качественных данных (данных, которые нельзя измерить количественно).

	Внешнее качество - степень, в которой продукт удовлетворяет установленные и подразумеваемые потребности при использовании в заданных условиях.

	Внешняя мера - это косвенная мера продукта, полученная из мер поведения системы, частью которой он является. 

	- Внешние меры могут использоваться для оценки атрибутов качества промежуточных продуктов ближе к конечным целям проекта.
	
	Внутреннее качество - полный набор атрибутов продукта, определяющих его способность удовлетворять установленные и подразумеваемые потребности при использовании в заданных условиях.

	Внутренняя мера - это собственная мера продукта. 

	Внутренняя мера может быть прямая или косвенная.

	Качество в использовании - степень, в которой программный продукт, используемый заданными пользователями, удовлетворяет их потребности в достижении заданных целей с результативностью, продуктивностью, безопасностью и удовлетворенностью в заданном контексте использования.

	Контекст использования - пользователи, задания, среда (аппаратное обеспечение, программное обеспечение и материалы), а также физические и социальные среды, в которых используется данное ПС.

	Модель качества - набор характеристик и связей между ними, обеспечивающий основу для определения требований к качеству и для оценки качества.

	Критерий оценки качества  - это совокупность принятых в установленном порядке правил и условий, с помощью которых устанавливается приемлемость общего качества ПС.

	Оценка качества - систематическое исследование степени, в которой продукт способен к выполнению указанных требований.

	Показатель качества ПС - признак, определяющий свойство ПС, которое может быть соотнесено с некоторой характеристикой качества.

	Отказ - прекращение способности продукта выполнять требуемую функцию или его неспособность работать в пределах заданных ограничений.

	Ошибка - некорректный шаг, процесс или определение данных в программе.

	Оценочный модуль - пакет технологии оценивания для конкретной характеристики или подхарактеристики качества ПС.

	Промежуточный программный продукт - продукт процесса разработки программного обеспечения, который используется в качестве входных данных для другой стадии процесса разработки программного обеспечения. 

	Промежуточный продукт может также быть конечным продуктом.

	Шкала -набор значений с определенными свойствами. 

	При оценке качества используются следующие типы шкал: 

	 • номинальная – соответствует набору категорий; классифицирует программы по признаку наличия или отсутствия некоторого свойства без учета градаций (например, «да», «нет»); 

	 • порядковая (упорядоченная) – соответствует упорядоченному набору делений шкалы; позволяет ранжировать свойства путем сравнения с опорными значениями; имеет небольшое количество делений (например, шкала с четырьмя градациями — «отлично», «хорошо», «удовлетворительно», «неудовлетворительно», или с двумя градациями — «удовлетворительно», «неудовлетворительно»); 
	
 	• интервальная – соответствует упорядоченной шкале с равноудаленными делениями; обычно содержит достаточно большое количество делений с количественными значениями (например, шкала с делениями 0, 1, 2, …, 10); 

 • относительная – соответствует упорядоченной шкале с равноудаленными делениями, оцененными в относительных единицах относительно некоторой абсолютной величины (часто в диапазоне от 0 до 1). 

	Два первых типа шкал применяются для оценки качественных атрибутов ПС, которые нельзя измерить количественно, и для ранжирования измеренных значений, третий и четвертый типы – для оценки количественных атрибутов.

17. Общие сведения о стандартах в области оценки качества, действующих на территории Республики Беларусь.
	В настоящее время в области оценки качества ПС на территории Республики Беларусь действуют следующие основные стандарты:

	- стандарт СССР ГОСТ 28806–90. Качество программных средств.

	- межгосударственный стандарт стран СНГГОСТ 28195–99. Оценка качества программных средств.
	
	- национальный стандарт Беларуси СТБ ИСО/МЭК 9126–2003. Информационные технологии. Оценка программной продукции. Характеристики качества и руководства по их применению

	Стандарт СТБ ИСО/МЭК 9126–2003 представляет собой аутентичный перевод международного стандартаISO/IEC 9126:1991

18. Методы определения показателей качества программного средства.

	Межгосударственный стандарт СНГ ГОСТ 28195–99 классифицируют методы определения показателей качества ПС по следующим критериям:

	• по способам получения информации о показателе качества:

		– измерительный;

		– регистрационный;

		– органолептический;

		– расчетный;

	• по источникам получения информации о показателе качества:

		– экспертный;

		– социологический;

		– традиционный.

	Измерительный метод – это метод получения информации о свойствах и характеристиках ПС путем измерений с помощью инструментальных средств.
	Регистрационный метод – это метод получения информации о свойствах и характеристиках ПС в процессе его испытания или функционирования, когда регистрируются некоторые события.
	Органолептический метод – это метод получения информации о свойствах и характеристиках ПС, основанный на восприятии органов чувств (зрения и слуха) человека.
	Расчетный метод – это метод получения информации о свойствах и характеристиках ПС, основанный на использовании эмпирических и теоретических зависимостей (на ранних этапах разработки), а также статистических данных, накапливаемых при испытаниях, эксплуатации и сопровождении ПС.
	Традиционный метод – это метод получения информации о свойствах и характеристиках ПС на основе непосредственного наблюдения за их функционированием в процессе работы.
	Социологический метод – это метод получения информации о свойствах и характеристиках ПС на основе обработки специальных анкет-опросников.
	Экспертный метод – это метод получения информации о свойствах и характеристиках ПС на основании мнений группы экспертов (специалистов, компетентных в решении данной задачи).

19. Иерархическая модель оценки качества программного средства. ГОСТ 28806–90.
	
	В соответствии с данной моделью совокупность свойств, отражающих качество программного средства, представляется в виде многоуровневой структуры. Характеристики на первом (верхнем) уровне соответствуют основным свойствам ПС. Характеристики каждого уровня оцениваются посредством характеристик последующих уровней.

	Стандарты ГОСТ 28806–90 и СТБ ИСО/МЭК 9126–2003 описывают первые два уровня иерархической модели качества. При этом номенклатура характеристик первого уровня является обязательной, а номенклатура характеристик второго уровня (подхарактеристик) – рекомендуемой.
	Вышеназванные стандарты определяют шесть основных характеристик качества ПС, находящихся на верхнем уровне модели качества. Следует отметить, что характеристики верхнего уровня, регламентированные ГОСТ 28806–90 и СТБ ИСО/МЭК 9126–2003, соответствуют принятым в мировой практике. В то же время характеристики и подхарактеристики, определенные в ГОСТ 28195–99, частично не соответствуют иерархической модели качества, принятой в международных стандартах.

	В стандартах ГОСТ 28806–90 и СТБ ИСО/МЭК 9126–2003 определены следующие характеристики качества ПС (характеристики верхнего уровня):

1. Функциональность (Functionality) – совокупность свойств ПС, определяемая наличием и конкретными особенностями набора функций, способных удовлетворять заданные или подразумеваемые потребности.

2. Надежность (Reliability) – совокупность свойств, характеризующая способность ПС сохранять заданный уровень пригодности в заданных условиях в течение заданного интервала времени.

3. Удобство использования (Практичность, Usability) – совокупность свойств программного средства, характеризующая усилия, необходимые для его использования, и индивидуальную оценку результатов его использования заданным или подразумеваемым кругом пользователей.

4. Эффективность (Efficiency) – совокупность свойств программного средства, характеризующая те аспекты его уровня пригодности, которые связаны с характером и временем использования ресурсов, необходимых при заданных условиях функционирования.

5. Сопровождаемость (Maintainability) – совокупность свойств программного средства, характеризующая усилия, которые необходимы для его модификации.

6. Мобильность (Portability) – совокупность свойств программного средства, характеризующая приспособленность для переноса из одной среды функционирования в другие.

20. Метод оценки качества программных средств по ГОСТ 28195–99.

	Стандартом ГОСТ 28195–99 рекомендован метод интегральной оценки качества ПС, основанный на иерархической модели качества.

	В соответствии с данным методом выбор номенклатуры показателей качества для конкретного программного средства осуществляется с учетом его назначения и требований области применения в зависимости от принадлежности ПС к тому или иному подклассу, определяемому общесоюзным классификатором продукции (ОКП).

	Оценка качества ПС заключается в следующих действия:

• выбор номенклатуры показателей,

• их оценка,

• сопоставление их с базовыми значениями.

	Основу рассматриваемого метода оценки качества ПС составляет четырехуровневая ИЕРАРХИЧЕСКАЯ МОДЕЛЬ КАЧЕСТВА.

ГОСТ 28195–99 предлагает следующую терминологию для показателей качества каждого уровня:

уровень 1 - ФАКТОРЫ КАЧЕСТВА (в терминологии, принятой в международных стандартах, соответствуют характеристикам качества);

уровень 2 - КРИТЕРИИ КАЧЕСТВА (в международной терминологии – подхарактеристики качества);

уровень 3 - МЕТРИКИ (полностью соответствует международной терминологии);

уровень 4 - ОЦЕНОЧНЫЕ ЭЛЕМЕНТЫ, или единичные показатели (в международных стандартах данный уровень отсутствует).

	там в методе дальше таблица ебанутая

21. Иерархическая модель оценки качества программного средства. ISO/IEC 9126-1:2001.

	Модель внутренних и внешних характеристик качества ПС состоит из шести группбазовых показателей, каждая из которых детализирована несколькими нормативными подхарактеристиками:

Функциональность:

1. пригодность;
2. корректность (правильность, точность);
3. способность к взаимодействию;
4. защищенность;
5. соответствие функциональности.

Надежность:

1. завершенности (отсутствие ошибок);
2. устойчивость к ошибке;
3. восстанавливаемость;
4. соответствие надёжности.

Применимость(практичность):

1. понятность;
2. обучаемость;
3. простота использования;
4. привлекательность;
5. соответствие практичности.

Эффективность:

1. поведение во времени;
2. использование ресурсов;
3. соответствие эффективности.

Сопровождаемость:

1. анализируемость;
2. изменяемость;
3. стабильность;
4. тестируемость;
5. соответствие сопровождаемости.

Переносимость(мобильность):

1. адаптируемостью;
2. настраиваемость;
3. совместимость;
4. взаимозаменяемость;
5. соответствие мобильности.

	Дополнительно каждая характеристика сопровождается подхарактеристикойсогласованность, которая должна отражать отсутствие противоречий с иными стандартами и нормативными документами, а также с другими показателями в данном стандарте. В стандарте ISO 9126 отсутствуют методики количественного измерения характеристик и сопоставления с требованиями спецификаций, а также рекомендации, на каких этапах ЖЦ ПС их целесообразно применять.

22. Метод оценки качества программных средств по стандарту
СТБ ИСО/МЭК 9126–2003.

	Процесс оценки состоит из трех стадий: определение требований к качеству ПС, подготовка к оцениванию и процедура оценивания. Данный процесс может применяться после любой подходящей работы жизненного цикла для каждого компонента программного продукта.

	Определение требований к качеству ПС

Цель: установка требований в терминах характеристик и подхарактеристик качества. Требования выражают потребности внешнего окружения ПС и должны быть определены до начала разработки. Так как ПС разделяется на компоненты, то требования для ПС в целом могут отличаться от требований для отдельных компонентов.

	Подготовка к оцениванию

Цель: подготовка основы для оценивания.

Этапы:

1. Выбор метрик качества.
2. Определение уровней ранжирования.
3. Определение критерия оценки.

	Процедура оценивания

Этапы:

1. Измерение
2. Ранжирование
3. Оценка

	К недостаткам данного метода следует отнести отсутствие рекомендуемых вариантов метрик и представление метода лишь в общем виде (в виде модели), что затрудняет его контекстное использование.

23. Стандарты серии ISO/IEC в области оценки качества программных средств. (SQuaRE)

	На данный момент в области оценки качества программных средств и систем действуют международные стандарты ISO/IEC серии Systems and software engineering – Systems and software Quality Requirements and Evaluation (SQuaRE).
	Международные стандарты серии SQuaRE разделены на следующие группы:

		управление качеством (2500n);
ISO/IEC 25000:2014 Guide to SQuaRE.
ISO/IEC 25001:2014 Planning and management.

		модели качества (2501n);
ISO/IEC 25010:2011 SQuaRE – System and software quality models.
ISO/IEC TS 25011:2017 Service quality models.
ISO/IEC 25012:2008 Data quality model.

		измерения качества (2502n);
ISO/IEC 25020:20 19 Measurement reference model and guide.
ISO/IEC 25021:2012 Quality measure elements.
ISO/IEC 25022:2016 Measurement of quality in use.
ISO/IEC 25023:2016 Measurement of system and software product quality.
ISO/IEC 25024:2015 Measurement of data quality.
ISO/IEC CD TS 25025.2 Measurement of IT service quality.

		требования к качеству (2503n);
ISO/IEC 25030:20 19 Quality requirements.

		оценки качества (2504n);
ISO/IEC 25040:2011 Evaluation process.
ISO/IEC 25041:2012 Evaluation guide for developers, acquirers and independent evaluators.
ISO/IEC 25045:2010 Evaluation module for recoverability.

группа расширения (2505n - 25099);
ISO/IEC 25051:2014 Requirements for quality of Ready to Use Software Product (RUSP) and instructions for testing.

24. Международные стандарты серии SQuaRE. Управление качеством (2500n)

	Стандарты раздела «Менеджмент качества» (ISO/IEC 2500n) определяют общие модели, термины и определения, которые используются далее во всех других международных стандартах серии SQuaRE, регламентируются общие принципы планирования и управления качеством систем и программных средств. Данная группа стандартов содержит также методические материалы по использованию стандартов серии SQuaRE.

25. Международные стандарты серии SQuaRE. Модель качества (2501n)

	В серии SQuaRE определены следующие модели качеств:

	- модели качества систем и программных средств;
	- модель качества данных;
	- модель качества ИТ-услуг.

	Модели качества обеспечивают основу для сбора требований заинтересованных сторон.

	Область применения моделей качества включает в себя спецификацию поддержки и оценку программного обеспечения и преимущественно программных вычислительных систем с разных точек зрения, которые связанны с их приобретением, требованиями, разработкой, использованием, оценкой, поддержкой, обслуживанием, обеспечением качества и управлением им, а также менеджментом и аудитом.

	Качество системы - это степень удовлетворения системой заявленных и подразумеваемых потребностей различных заинтересованных сторон, которая позволяет, таким образом, оценить достоинства.

	К настоящему времени в серии SQuaRE имеются три модели качества:

1. модель качества при использовании (определена в ISO/IEC 25010);
2. модель качества продукта (определена в ISO/IEC 25010);
3. модель качества данных (определена в ISO/IEC 25012).

	Совместное использование моделей качества дает основание считать, что учтены все характеристики качества.

	Качество при использовании - степень, в которой продукт или система могут использоваться конкретными пользователями для достижения определенных целей с эффективностью, производительностью, свободой от риска и удовлетворенностью в конкретных условиях использования для удовлетворения их потребностей.

	Модель качества при использовании:

	1. Эффективность
	2. Производительность
	3. Удовлетворёность
	4. Свобода от риска
	5. Покрытие контекста

	Модель качества продукта:

	1. Функциональная пригодность
	2. Уровень производительности
	3. Совместимость
	4. Удобство использования
	5. Надёжность
	6. Защищённость
	7. Сопровождаемость
	8. Переносимость/Мобильность

	Модель качества данных:
	
	1. Собственное качество данных
	2. Системно-зависимое качество данных

	Собственное качество данных относится к степени, в которой качественные характеристики данных обладают внутренним потенциалом для удовлетворения заявленных и подразумеваемых потребностей, когда данные используются в определенных условиях.
	Под системно-зависимым качеством данных (или качеством данных, зависящим от системы) понимается степень, в которой качество данных достигается и сохраняется в компьютерной системе, когда данные используются в определенных условиях. 

26. Международные стандарты серии SQuaRE. Измерения качества (2502n)

27. Международные стандарты серии SQuaRE. Оценки качества(2504n)

	на вход получаем:
1. Входные данные оценки
2. Ресурсы оценки
3. Ограничения для оценки

	 на выходе получаем выходные данные оценки качества ПП.

Процесс оценки качества:

	1. Установка требований к оценке:
		1.1 Установка цели оценки
		1.2 Получение требований к качеству ПП
		1.3 Идентификация частей продукта, которые должны быть включены в оценку
		1.4 Определённые строгости оценки
	
	2. Определение оценки:
		2.1 Выбор мер качества (модулей оценки)
		2.2 Определение критериев принятия решения для мер качества
		2.3 Установка критериев принятия решения для оценки
	
	3. Проекирование оценки
		3.1 Разработка плана действий по оценке
	
	4. Выполнение оценки:
		4.1 Выполнение измерений
		4.2 Применение критериев принятия решения
		4.3 Применение критериев принятия решения для оценки

	5. Заключение об оценке:
		5.1 Анализ результатов оценки
		5.2 Создание отчёта по оценке
		5.3 Аналих оценки качества и информирование организации
		5.4 Размещение данных об оценке

28. Связь качества программного средства с его жизненным циклом

	В течение всего жизненного цикла программного средства его качество изменяется.

	И необходимо понимать, что требуемое качество, которое определено в начале жизненного цикла, отличается от фактического качества поставленного продукта. Существует несколько точек зрения на качество программного средства в течение его жизненного цикла, от выбора которых зависит как оценка качества, так и управление качеством на каждой стадии жизненного цикла.

	В зависимости от стадии жизненного цикла выделены следующие основные виды качества программных средств: внутреннее, внешнее и качество в использовании компьютерных систем.

	Требования к внутреннему качеству определяют требуемый уровень качества с внутренней точки зрения на программный продукт.

	Требования к внешнему качеству определяют требуемый уровень качества с внешней точки зрения.

	Потребности пользователя в качестве (требования к качеству в использовании) определяются как требования к качеству, выраженные в терминах мер качества в использовании, внешних и иногда внутренних мер.

	Внутреннее качество - это совокупность характеристик программного продукта с внутренней точки зрения; внутреннее качество измеряется с помощью внутренних метрик и оценивается по отношению к требованиям к внутреннему качеству.

	Внешнее качество - это совокупность характеристик программного продукта с внешней точки зрения; это качество, измеряемое и оцениваемое на основе внешних метрик при выполнении программного продукта во время тестирования (испытаний) в моделируемой среде с моделируемыми данными или во время эксплуатации.

	Качество в жизненном цикле программного продукта можно рассматривать в трех основных стадиях:

	- внутреннее качество программного обеспечения на стадии разработки;
	- внешнее качество программного обеспечения на стадии тестирования;
	- качество в использовании на стадии применения программного продукта.
	
	Внешние оценки качества могут использоваться, чтобы предсказать системное качество в использовании.

29. Метрики и их типы. Шкала. Типы шкал. Атрибуты.

	Атрибуты программной системы, характеризующие ее качество, измеряются с использованием метрик качества.

	Метрика - комбинация конкретного метода измерения (способа получения значений) атрибута сущности и шкалы измерения (средства, используемого для структурирования получаемых значений).
	
	Метрика определяет меру атрибута – переменную, которой присваивается значение в результате измерения. Термин «мера» – эквивалент употребляемого в международных стандартах термина «measure» ( – мера, измерять, единица измерения).
	Метрика качества программной системы представляет собой «модель измерения атрибута, связываемого с характеристикой качества ПС. Служит индикатором одного или многих атрибутов».
	Метрика называется базовой, если в ее основе лежит элементарный метод (примитив) измерения атрибута.

	Для того чтобы правильно пользоваться результатами измерений, для каждой меры нужно установить шкалу измерения. Принято использовать одну из следующих шкал: номинальная, порядковая, интервальная, относительная или абсолютная.

	Для разработки процедур сбора данных, интерпретации мер и их нормализации с целью сравнения, нужно различать следующие типы мер, определяемых метриками:

	- Меры размера.
		Представляют размер ПС в разных единицах измерения.

	- Меры времени.
		Представляют периоды реального времени (в секундах, минутах или часах), процессорного времени (в секундах, минутах или часах работы процессора) или календарного времени (в рабочих часах, календарных днях, месяцах, годах).

	-Меры усилий.
		Представляют полезное (продуктивное) время, связанное с определенной задачей проекта.

	- Меры интервалов между событиями.
		Представляют интервалы времени между наступлением событий, происходящих в определенный период наблюдения. Вместо этой меры может использоваться частота наступления событий.

	- Счетные меры.
		Представляют собой статические счетчики (для учета определенных элементов в рабочих продуктах или документах) или кинетические (динамические) счетчики (для учета событий или действий человека).


	В исследовании метрик программных средств принято выделять 2 основных направления:

	- поиск набора метрик, которые характеризуют наиболее специфические свойства программного обеспечения;
	- использование метрик для оценки технических характеристик и факторов разработки программ.

	Для удобства применения общих приемов измерений метрики обычно классифицируют как:

		объективные или субъективные;
		примитивные или вычисляемые;
		динамические или статические.

30. Свойства и критерии обоснованности метрик качества программных средств.

	желательные свойства метрик:
1. надежность; 
		надежность связана со случайной ошибкой; метрика свободна от случайной ошибки, если случайные изменения не влияют на результаты метрики;
2. повторяемость; 
		повторное использование метрики для того же продукта теми же специалистами по оценке, используя ту же спецификацию оценки, тот же тип пользователей и окружения, должно привести к тем же результатам;
3. однотипность; 
		применение метрики для того же продукта различными специалистами по оценке, используя ту же спецификацию оценки, тот же тип пользователей и окружения должно привести к тем же результатам с соответствующими допусками;
4. применимость;
		метрика должна чётко указывать условия (например, наличие определённых атрибутов), которые ограничивают её употребление;
5. показательность:
		это способность метрики идентифицировать части или элементы программы, которые должны быть улучшены, на основании сравнения измеренных и ожидаемых результатов;
6. корректность; оч дохуя про неё
7. значимость;
		измерение должно давать значащие результаты, касающиеся поведения программы или характеристик качества;

Критерии обоснованности метрики:
1. корреляция; 
		изменение в значениях характеристик качества, обусловленное изменением в значениях метрики, должно определяться линейной зависимостью;
2. трассировка;
		если метрика М непосредственно связана с величиной характеристики Q, то изменение величины Q(t1), имеющей место в момент времени t1 к величине Q(t2) в момент времени t2, должно сопровождаться изменением значения метрики от M(t1) до М(t2) в том же направлении.
3. непротиворечивость; если Q1>Q2>Q3>...>Qn, то и должно выполняться M1>M2>M3.....Mn.
4. предсказуемость;
		если метрика используется в момент времени t1 для проноза значения характеристики качества Q в момент времени t2, то ошибка прогнозирования определяемая выражением (A-B)/B, должна попадать в допустимый диапазон ошибок прогнозирования;
A - прогнозное Q(t2), 
B - фактическое Q(t2).
5. селективность;
		метрика должна быть способной различать высокое и низкое качество ПС.

31. Метрики программных продуктов. Метрики сложности программных средств.
	
	Метрики оценки сложности программ разбивают на 3 основные группы:
	1. метрики размера программ
	2. метрики сложности потока управления программ
	3. метрики сложности потока данных программ
	
	Основная цель метрик сложности – выявить наиболее критичные участки программного проекта, которые являются потенциальными источниками ошибок и повышенных рисков на всех стадиях его жизненного цикла.

	Метрики первой группы (количественная оценка/размер программы) базируются на определении количественных характеристик, связанных с размером программы, и ориентированы на анализ исходного текста программ. Могут использоваться для оценки сложности промежуточных продуктов разработки.

	Метрики второй группы (оценка сложности потока управления программ) базируются на анализе управляющего графа программы, поэтому эти метрики могут применяться для оценки сложности промежуточных продуктов разработки. Эти метрики используются главным образом для апостериорного анализа, однако могут применяться и на ранних стадиях работы при осуществлении проектирования.

	Третья группа метрик сложности программ (оценка сложности потока данных) применяется для верификации использования, конфигурации и размещения данных в программах.
	
	Как правило, с помощью этих оценок оперируют либо плотностью управляющих переходов внутри программ, либо взаимосвязями этих переходов. И в том, и в другом случае стало традиционным представление программ в виде управляющего ориентированного графа G=(V,E), где V – вершины, соответствующие операторам, а E – дуги, соответствующие переходам от оператора к оператору.

32. Метрики размера программ. Примеры.

	Традиционной характеристикой размера программ является количество строк кода. Непосредственное измерение размера программы дает хорошие результаты для классификации программ, существенно различающихся объемами.
	В зависимости от того, как учитывается исходыный код, есть два основных показателя:
	- ОЦЕНКА КОЛИЧЕСТВА "ФИЗИЧЕСКИХ" СТРОК КОДА
LOC - Lines of Code - общее число строк кода
SLOC - Source Lines of Code - то же, но без комментариев и пустых строк.

	- ОЦЕНКА КОЛИЧЕСТВА "ЛОГИЧЕСКИХ" СТРОК КОДА
LSI - Lines of Source Instructions - количество команд языка в коде программы
DSI - Delivered of Source Instructions - количество команд языка, вошедших в конечную поставку программы.

LOC/SLOC и т.д. НЕ ЗАВИСЯТ ОТ ЯЗЫКА, LSI/DSI и т.д. ЗАВИСЯТ ОТ ЯЗЫКА ПРОГРАММИРОВАНИЯ НАХХХХХХУУУУУУЙ!!!!!

	Метрика Холстеда
состоит из 4 характеристик программы:
n1 - число уникальных операторов программы
n2 - число уникальных операндов
N1 - общее число операторов в программе
N2 - общее число операндов в программе

итого имеем:
- сложность программы n=n1+n2
- длину программы N=N1+N2
- объём программы V=N*log2(n) (бит)
- сложность программы по Холстеду Hdiff = (n1/2)(N2/n2)

33. Метрики сложности потока управления программ. Примеры.

Метрика Маккейба:
Формула вычисления цикломатической сложности выглядит след. образом: Z(G)=l-v+2p, где
l - число рёбер
v - число узлов
p - число компонент связности графа

Число компонент связности графа можно рассматривать как количество дуг, которые необходимо добавить для преобразования графа в сильносвязный. Сильносвязным называют граф, любые две вершини которого взаимодостижимы.

	Цикломатическая сложность определяет число линейно независимых контуров в сильносвязном графе. Иначе говоря, цикломатическое число Маккейба показывает требуемое число проходов для покрытия всех контуров в сильносвязном графе или количество тестовых прогонов программы, необходимых для исчерпывающего тестирования по критерию "работает каждая ветвь".

Метрика Джилба
	Одной из наиболее простых, но, как показывает практика, достаточно эффективных оценок сложности программ является метрика Джилба, в которой логическая сложность программы определяется как насыщенность программы условными выражениями.
	Вводятся 2 характеристики:
- CL - абсолютная сложность программы, хараткеризующаяся количеством операторов условия.
- cl - относительная сложность программы, характеризующаяся насыщенностью программы операторами условия, т.е. cl определяется как отношения CL к общему числу операторов.
	используя метрику Джилба, её дополнили ещё одной характеристикой: максимальный уровень вложенности оператора CLI, что позволило не только уточнить аналих по условным операторам, но и успешно применить метрику Джилба к анализу циклических конструкций.

34. Метрика сложности потока данных программ. Примеры.

	Метрика Спен.
Определение спена основывается на локализации обращения к данным внутри каждой программной секции.
Спен - это число утверждений, содержащих данный идентификатор, между его первым и последним появлением в тексте программы. Идентификатор, появившийся n раз имеет спен n-1.
	Спен определяет количество контролирующих утверждений, вводимых в тело программы при построении трассы программы по этому идентификатору в процессе тестирования и отладки.

	Метрика Кафура
Создана на основе концепции информационных потоков.
Для использования данной меры вводятся понятия локального и глобального потока. На основе этих понятий вводится величина "информационная сложность процедуры" I, которая рассчитывается как 
I=length(fan_in*fan_out), где
length - сложнось текста подпрограммы (определяется через метрику размерности (Холстед, LOC и т.д.))
fan_in - число локальных потоков, входязих внутрь процедуры плюс число структур данных, из которых процедура берёт информацию
fan_out - число локальных потоков, исходящих из процедуры плюс число структур данных, которые обновляются процедурой.

Информационную сложность модуля можно определить как сумму информационных сложностей входящих в него процедур.

	Однако более интересной для применения является характеристика "Информационная сложность модуля относительно его структур данных", рассчитывается по формуле
J=W*R+W*RW+RW*R+RW*(RW-1), где
W - число процедур, которые только обновляют заданную структуру данных
R - число процедур, которые только читают информацию из заданной структуры данных
RW - число процедур, которые и читают, и обновляют информацию в структурах данных.

Следует отметить, что все рассмотренные метрики сложности программы основаны на анализе исходных текстов программ, что обеспечивает единый подход к автоматизации их расчёта.

35. Инструментальные средства автоматизации применения метрик программных
продуктов.

36. Основные понятия и определения в области технического нормирования и
оценки соответствия

	Технический кодекс установившейся практики (ТКП) – это технический нормативный правовой акт, разработанный в процессе стандартизации, содержащий основанные на результатах установившейся практики технические требования к процессам жизненного цикла продукции или оказанию услуг.
	Стандарт – это технический нормативный правовой акт, разработанный в процессе стандартизации на основе согласия большинства заинтересованных субъектов технического нормирования и стандартизации и содержащий технические требования к продукции, процессам ее жизненного цикла или оказанию услуг.
	Технические условия (ТУ) – это технический нормативный правовой акт, разработанный в процессе стандартизации, утвержденный юридическим лицом или индивидуальным предпринимателем и содержащий технические требования к конкретным типу, марке, модели, виду реализуемой ими продукции или оказываемой услуге, включая правила приемки и методы контроля.

	В области оценки соответствия приняты следующие основные термины и понятия:

	Аккредитация - вид оценки соответствия, результатом осуществления которого является официальное признание компетентности юридического лица в выполнении работ по подтверждению соответствия и (или) проведении испытаний продукции.
	Аккредитованная испытательная лаборатория (центр): юридическое лицо, аккредитованное для проведения испытаний продукции в определенной области аккредитации.
	Аккредитованный орган по сертификации - юридическое лицо, аккредитованное для выполнения работ по подтверждению соответствия в определенной области аккредитации.
	Аккредитованный субъект - орган по сертификации либо АИЛ(центр).
	Аттестат аккредитации - документ, удостоверяющий компетентность юридического лица в выполнении работ по подтверждению соответствия или в проведении испытаний продукции в определенной области аккредитации.
	Владелец сертификата - очевидно.
	Декларация о соответствии - документ, в котором изготовитель (продавец) удостоверяет соответствие производимой и (или) реализуемой им продукции требованиям технических нормативных правовых актов в области технического нормирования и стандартизации.
	Декларирование соответствия - форма подтверждения соответствия, осуществляемая изготовителем, или уполномоченным изготовителем лицом, либо продавцом (поставщиком), которая носит обязательный характер и результатом которой является документальное удостоверение соответствия продукции техническим требованиям.
	Заявитель на проведение аккредитации - Юридическое лицо либо иностранное юридическое лицо, братившиеся с заявкой на аккредитацию.
	Заявитель на проведение испытаний - физическое лицо (за исключением лиц, являющихся индивидуальными предпринимателями) или юридическое лицо (либо индивидуальный предприниматель), обратившиеся с заявкой на проведение испытаний.
	Область аккредитации - сфера деятельности, в которой аккредитованному органу по сертификации или аккредитованной испытательной лаборатории (центру) предоставлено право на выполнение работ по подтверждению соответствия или проведение испытаний продукции.
	Орган по аккредитации - Государственная организация, определенная Государственным комитетом по стандартизации Республики Беларусь и подчиненная ему, проводящая аккредитацию.
	Орган по оценке соответствия - орган по сертификации либо испытательная лаборатория (центр).
	Оценка соответствия - деятельность по определению соответствия объектов оценки соответствия требованиям технических нормативных правовых актов в области технического нормирования и стандартизации.
	Подтверждение соответствия - вид оценки соответствия, результатом осуществления которого является документальное удостоверение соответствия объекта оценки требованиям технических нормативных правовых актов в области технического нормирования и стандартизации.
	

37. Технические нормативные правовые акты в области технического нормирования и стандартизации
	
	В Законе от 5 января 2004 г. №262-З «О техническом нормировании и стандартизации» (Глава 3 «Технические нормативные правовые акты в области технического нормирования и стандартизации») определены следующие технические нормативные правовые акты в области технического нормирования и стандартизации:
	- технические регламенты
	- технические кодексы установившейся практики
	- гос стандарты РБ
	- технические условия
	- стандарт организаций

	Технический регламент (ТР) - технический нормативный правовой акт, разработанный в процессе технического нормирования, устанавливающий непосредственно и/или путем ссылки на технические кодексы установившейся практики и/или государственные стандарты обязательные для соблюдения технические требования, связанные с безопасностью продукции и процессов ее жизненного цикла.
	Технический регламент РБ - технический нормативный правовой акт РБ, разработанный в процессе технического нормирования, утвержденный Совмином РБ и содержащий обязательные для соблюдения технические требования к объектам технического нормирования.
	Технический комитет (ТК) - объединение на добровольной основе заинтересованных организаций и физических лиц с целью разработки документов в области технического нормирования и стандартизации. ТК по стандартизации не являются юридическими лицами.
	Гос. стандарт (ГОСТ) - технический нормативный правовой акт, разработанный в процессе стандартизации на основе согласия большинства заинтересованных субъектов технического нормирования и стандартизации и содержащий технические требования к продукции, процессам ее жизненного цикла или оказанию услуг.

38. Основные понятия сертификации программных средств и систем качества. Цели сертификации.

	Аккредитованный орган по сертификации - юридическое лицо, аккредитованное для выполнения работ по подтверждению соответствия в определенной области аккредитации.	
	Сертификат компетентности - документ, удостоверяющий профессиональную компетентность физического лица в выполнении определенных работ, услуг.	
	Сертификат соответствия - документ, удостоверяющий соответствие объекта оценки требованиям технических нормативных правовых актов в области технического нормирования и стандартизации.
	Сертификация - форма подтверждения соответствия, осуществляемого аккредитованным органом по сертификации.
	Технический эксперт по сертификации - физическое лицо, обладающее специальными знаниями в определенной области, связанной с объектами оценки соответствия, назначенное (привлеченное) для участия в сертификации органом по сертификации.

	Основной целью сертификации технологий проектирования и производства систем и программных средств является защита интересов пользователей, государственных и ведомственных интересов на основе контроля качества продукции, обеспечения их высоких потребительских свойств, повышения эффективности затрат в сфере их производства, эксплуатации и сопровождения, повышения объективности оценок характеристик и обеспечения конкурентоспособности конечного продукта.

39. Организация сертификации ПС
	
	Оценка соответствия в контексте информационных технологий, предполагает применение к программным средствам такой формы подтверждения соответствия как сертификация.

	Отличием процесса сертификации программных средств от сертификации других видов продукции является высокая сложность. Связано это, в первую очередь, с невозможностью провести исчерпывающее тестирование сертифицируемых программных средств, имеющих, как правило, достаточно большой объем.

	Результатом положительного прохождения сертификации является выдача сертификата соответствия.

	Существует два вида сертификации программных средств – обязательная сертификация и добровольная сертификация.

	- Обязательной сертификации подвергаются программные средства, выполняющие особо ответственные функции, в которых недостаточное качество и ошибки представляют потенциальную опасность для жизни, здоровья и наследственности человека, имущества и окружающей среды.

	- Добровольная сертификация применяется для удостоверения качества программного средства с целью повышения их конкурентоспособности и создания благоприятных условий для обеспечения свободного перемещения продукции на внутреннем и внешнем рынках.


	Процесс сертификации программных средств состоит из 10 (десяти) основных шагов: 
1. анализ и выбор разработчиком или заказчиком компетентного в данной области органа по сертификации;

2. подачу заявителем заявки на сертификацию в орган сертификации;

3. принятие органом сертификации решения по заявке, выбор испытательной лаборатории и схемы сертификации;

4. обзор и идентификацию версий ПС, подлежащих испытаниям;

5. сертификационные испытания ПС испытательной лабораторией;

6. анализ полученных результатов и принятие решения лабораторией или органом сертификации о возможности выдачи заявителю сертификата соответствия;

7. выдачу органом сертификации заявителю сертификата на сертифицированную версию программного средства;

8. осуществление инспекционного контроля органом сертификации за сертифицированным программным средством;

9. проведение заявителем корректирующих мероприятий при нарушении соответствия программного средства установленным требованиям;

10. регистрацию и публикацию информации о результатах сертификации программного средства. 

40. Оценка соответствия в Республике Беларусь.
нахуй, я заебался.